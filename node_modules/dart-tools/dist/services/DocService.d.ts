import type { PaginatedConciseDocList } from "../models/PaginatedConciseDocList";
import type { WrappedDoc } from "../models/WrappedDoc";
import type { WrappedDocCreate } from "../models/WrappedDocCreate";
import type { WrappedDocUpdate } from "../models/WrappedDocUpdate";
import type { CancelablePromise } from "../core/CancelablePromise";
export declare class DocService {
    /**
     * Create a new doc
     * Record a new doc that the user intends to write down. This will save the doc in Dart for later access, search, etc. By default the created doc will be in the Docs folder. More information can be included in the text.
     * @param requestBody
     * @returns WrappedDoc Success, including the created doc
     * @throws ApiError
     */
    static createDoc(requestBody: WrappedDocCreate): CancelablePromise<WrappedDoc>;
    /**
     * Retrieve an existing doc
     * Retrieve an existing doc. This will return the doc's information, including the title, folder, text and others.
     * @param id
     * @returns WrappedDoc Success, including the retrieved doc
     * @throws ApiError
     */
    static retrieveDoc(id: string): CancelablePromise<WrappedDoc>;
    /**
     * Update an existing doc
     * Update certain properties of an existing doc. This will save the doc in Dart for later access, search, etc. Any properties that are not specified will not be changed.
     * @param id
     * @param requestBody
     * @returns WrappedDoc Success, including the updated doc
     * @throws ApiError
     */
    static updateDoc(id: string, requestBody: WrappedDocUpdate): CancelablePromise<WrappedDoc>;
    /**
     * Delete an existing doc
     * Move an existing doc to the trash, where it can be recovered if needed. Nothing else about the doc will be changed.
     * @param id
     * @returns WrappedDoc Success, including the deleted doc
     * @throws ApiError
     */
    static deleteDoc(id: string): CancelablePromise<WrappedDoc>;
    /**
     * List all docs that the user has access to. This will return a list of docs, including the title, folder, text and others.
     * @returns PaginatedConciseDocList
     * @throws ApiError
     */
    static listDocs({ folder, folderId, ids, inTrash, limit, o, offset, s, text, title, }: {
        folder?: string;
        folderId?: string;
        /**
         * Filter by IDs
         */
        ids?: string;
        inTrash?: boolean;
        /**
         * Number of results to return per page.
         */
        limit?: number;
        /**
         * Ordering
         *
         * * `order` - Order
         * * `-order` - Order (descending)
         * * `created_at` - Created at
         * * `-created_at` - Created at (descending)
         * * `updated_at` - Updated at
         * * `-updated_at` - Updated at (descending)
         * * `title` - Title
         * * `-title` - Title (descending)
         */
        o?: Array<"-created_at" | "-order" | "-title" | "-updated_at" | "created_at" | "order" | "title" | "updated_at">;
        /**
         * The initial index from which to return the results.
         */
        offset?: number;
        /**
         * Search by title, text, or folder title
         */
        s?: string;
        text?: string;
        title?: string;
    }): CancelablePromise<PaginatedConciseDocList>;
}
