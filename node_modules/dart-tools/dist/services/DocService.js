"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocService = void 0;
const OpenAPI_1 = require("../core/OpenAPI");
const request_1 = require("../core/request");
class DocService {
    /**
     * Create a new doc
     * Record a new doc that the user intends to write down. This will save the doc in Dart for later access, search, etc. By default the created doc will be in the Docs folder. More information can be included in the text.
     * @param requestBody
     * @returns WrappedDoc Success, including the created doc
     * @throws ApiError
     */
    static createDoc(requestBody) {
        return (0, request_1.request)(OpenAPI_1.OpenAPI, {
            method: "POST",
            url: "/docs",
            body: requestBody,
            mediaType: "application/json",
            errors: {
                400: `Invalid request, including the errors`,
            },
        });
    }
    /**
     * Retrieve an existing doc
     * Retrieve an existing doc. This will return the doc's information, including the title, folder, text and others.
     * @param id
     * @returns WrappedDoc Success, including the retrieved doc
     * @throws ApiError
     */
    static retrieveDoc(id) {
        return (0, request_1.request)(OpenAPI_1.OpenAPI, {
            method: "GET",
            url: "/docs/{id}",
            path: {
                id: id,
            },
            errors: {
                400: `Invalid request, including the errors`,
                404: `Doc not found, including the errors`,
            },
        });
    }
    /**
     * Update an existing doc
     * Update certain properties of an existing doc. This will save the doc in Dart for later access, search, etc. Any properties that are not specified will not be changed.
     * @param id
     * @param requestBody
     * @returns WrappedDoc Success, including the updated doc
     * @throws ApiError
     */
    static updateDoc(id, requestBody) {
        return (0, request_1.request)(OpenAPI_1.OpenAPI, {
            method: "PUT",
            url: "/docs/{id}",
            path: {
                id: id,
            },
            body: requestBody,
            mediaType: "application/json",
            errors: {
                400: `Invalid request, including the errors`,
                404: `Doc not found, including the errors`,
            },
        });
    }
    /**
     * Delete an existing doc
     * Move an existing doc to the trash, where it can be recovered if needed. Nothing else about the doc will be changed.
     * @param id
     * @returns WrappedDoc Success, including the deleted doc
     * @throws ApiError
     */
    static deleteDoc(id) {
        return (0, request_1.request)(OpenAPI_1.OpenAPI, {
            method: "DELETE",
            url: "/docs/{id}",
            path: {
                id: id,
            },
            errors: {
                400: `Invalid request, including the errors`,
                404: `Doc not found, including the errors`,
            },
        });
    }
    /**
     * List all docs that the user has access to. This will return a list of docs, including the title, folder, text and others.
     * @returns PaginatedConciseDocList
     * @throws ApiError
     */
    static listDocs({ folder, folderId, ids, inTrash, limit, o, offset, s, text, title, }) {
        return (0, request_1.request)(OpenAPI_1.OpenAPI, {
            method: "GET",
            url: "/docs/list",
            query: {
                folder: folder,
                folder_id: folderId,
                ids: ids,
                in_trash: inTrash,
                limit: limit,
                o: o,
                offset: offset,
                s: s,
                text: text,
                title: title,
            },
        });
    }
}
exports.DocService = DocService;
//# sourceMappingURL=DocService.js.map